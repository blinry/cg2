# 
# Try to find OpenEXR, 
# a high dynamic rang image library.
# (see  www.openexr.org)
# 
# Once run this will define: 
# 
# OPENEXR_FOUND
# OPENEXR_INCLUDE_DIR
# OPENEXR_LIBRARIES
# OPENEXR_LINK_DIRECTORIES
#
# Jan Woetzel 07/2004
# www.mip.informatik.uni-kiel.de/~jw
#

# tested with OpenEXR 1.2.1 on: 
# -Linux Suse9.2, gcc 3.3: 1.21, 1.22)
# -Linux Suse 10.1, gcc 4.1: 1.22
# -MS Windows XP, Visual Studio .NET 2003 7.1 (1.21, 1.22, 1.30)
# - OpenEXR 1.2.2 on openSuse 10.1, XP with MSVS 7.1

#
# set (additional) directories to search for headers: 
#
SET(OPENEXR_POSSIBLE_INC_DIRS
  "$ENV{OPENEXR_DIR}/vc/vc7/include"
  "$ENV{OPENEXR_DIR}/vc/vc7/include/OpenEXR"
  "$ENV{OPENEXR_DIR}/vc/vc7/include/IlmImf"
  "$ENV{OPENEXR_DIR}/vc/vc7/include/Imath"
  "$ENV{OPENEXR_DIR}/vc/vc7/include/Iex" 

  "$ENV{OPENEXR_DIR}/include"
  "$ENV{OPENEXR_DIR}/include/OpenEXR"
  "$ENV{OPENEXR_DIR}/include/IlmImf"
  "$ENV{OPENEXR_DIR}/include/Imath"
  "$ENV{OPENEXR_DIR}/include/Iex"

  "$ENV{OPENEXR_HOME}/include"
  "$ENV{OPENEXR_HOME}/include/OpenEXR"
  "$ENV{OPENEXR_HOME}/include/IlmImf"
  "$ENV{OPENEXR_HOME}/include/Imath"
  "$ENV{OPENEXR_HOME}/include/Iex" 

  "$ENV{EXTRA}/include"
  "$ENV{EXTRA}/include/OpenEXR"
  "$ENV{EXTRA}/include/IlmImf"
  "$ENV{EXTRA}/include/Imath"
  "$ENV{EXTRA}/include/Iex" 
  
  /usr/include/OpenEXR
  /usr/local/include/OpenEXR
  
  /opt/net/gcc33/OpenEXR
  /opt/net/gcc33/OpenEXR/include
  /opt/net/gcc33/OpenEXR/include/OpenEXR  
  )
#MESSAGE("DBG OPENEXR_POSSIBLE_INC_DIRS=${OPENEXR_POSSIBLE_INC_DIRS}")

##
# find specific headers fo rinclude dir(s):
##
FIND_PATH(OPENEXR_HALF_INCLUDE_DIR half.h
  ${OPENEXR_POSSIBLE_INC_DIRS} )
#MESSAGE("DBG OPENEXR_HALF_INCLUDE_DIR=${OPENEXR_HALF_INCLUDE_DIR}")

FIND_PATH(OPENEXR_IMFRGBA_INCLUDE_DIR ImfRgba.h
  ${OPENEXR_POSSIBLE_INC_DIRS}  )
#MESSAGE("DBG OPENEXR_IMFRGBA_INCLUDE_DIR=${OPENEXR_IMFRGBA_INCLUDE_DIR}")

FIND_PATH(OPENEXR_IEX_INCLUDE_DIR Iex.h
  ${OPENEXR_POSSIBLE_INC_DIRS}  )

FIND_PATH(OPENEXR_IMATHBOX_INCLUDE_DIR ImathBox.h
  ${OPENEXR_POSSIBLE_INC_DIRS}  )


##
# find (all) required libraries: 
##

# set additional possible dirs to search for libs: 
SET(OPENEXR_POSSIBLE_LIB_DIRS 
  "${OPENEXR_DIR}/vc/vc7/lib"
  "$ENV{OPENEXR_DIR}/vc/vc7/lib"
  
  "${OPENEXR_DIR}/lib"
  "${OPENEXR_DIR}"
  "$ENV{OPENEXR_DIR}/lib" 	 
  "$ENV{OPENEXR_DIR}"

  "${OPENEXR_HOME}/lib"
  "${OPENEXR_HOME}"
  "$ENV{OPENEXR_HOME}/lib"
  "$ENV{OPENEXR_HOME}"
  
  # libs may reside in subdirs on Windows or source tree on Linux
  "$ENV{OPENEXR_HOME}/lib/half"
  "$ENV{OPENEXR_HOME}/Half"
  "${OPENEXR_DIR}/lib/half"
  "${OPENEXR_DIR}/Half"
  
  "$ENV{OPENEXR_HOME}/lib/iex"
  "$ENV{OPENEXR_HOME}/Iex"
  "${OPENEXR_DIR}/lib/iex"
  "${OPENEXR_DIR}/Iex"

  "$ENV{OPENEXR_HOME}/lib/ilmimf"
  "$ENV{OPENEXR_HOME}/ilmimf"
  "${OPENEXR_DIR}/lib/ilmimf"
  "${OPENEXR_DIR}/ilmimf"

  "$ENV{OPENEXR_HOME}/lib/imath"
  "$ENV{OPENEXR_HOME}/imath"
  "${OPENEXR_DIR}/lib/imath"
  "${OPENEXR_DIR}/imath"

  /usr/lib
  /usr/local/lib  
  /opt/net/gcc41/OpenEXR
  /opt/net/gcc41/OpenEXR/lib
  /opt/net/gcc33/OpenEXR
  /opt/net/gcc33/OpenEXR/lib
  "$ENV{EXTRA}/lib"
  
  #"C:/lib/lib"
  #"D:/lib/lib"
  #"C:/extra/lib"
  #"D:/extra/lib"  
  )
#MESSAGE("DBG OPENEXR_POSSIBLE_LIB_DIRS=${OPENEXR_POSSIBLE_LIB_DIRS}")


FIND_LIBRARY(OPENEXR_Half_STATIC_LIBRARY
  NAMES Half 
  PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
#MESSAGE("DBG OPENEXR_Half_STATIC_LIBRARY=${OPENEXR_Half_STATIC_LIBRARY}")
IF (WIN32)
  FIND_LIBRARY(OPENEXR_Half_STATIC_DEBUG_LIBRARY
    NAMES Halfd Half_d
    PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
  #MESSAGE("DBG OPENEXR_Half_STATIC_DEBUG_LIBRARY=${OPENEXR_Half_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)

FIND_LIBRARY(OPENEXR_IlmImf_STATIC_LIBRARY
  NAMES IlmImf 
  PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
#MESSAGE("DBG OPENEXR_IlmImf_STATIC_LIBRARY=${OPENEXR_IlmImf_STATIC_LIBRARY}")
IF (WIN32)
  FIND_LIBRARY(OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY
    NAMES IlmImfd  IlmImf_d
    PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
  #MESSAGE("DBG OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY=${OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)

FIND_LIBRARY(OPENEXR_Imath_STATIC_LIBRARY
  NAMES Imath 
  PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
#MESSAGE("DBG OPENEXR_Imath_STATIC_LIBRARY=${OPENEXR_Imath_STATIC_LIBRARY}")
IF(WIN32)
  FIND_LIBRARY(OPENEXR_Imath_STATIC_DEBUG_LIBRARY
    NAMES Imathd Imath_d
    PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})
  #MESSAGE("DBG OPENEXR_Imath_STATIC_DEBUG_LIBRARY=${OPENEXR_Imath_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)


FIND_LIBRARY(OPENEXR_Iex_STATIC_LIBRARY
  NAMES Iex 
  PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})  
#MESSAGE("DBG OPENEXR_Iex_STATIC_LIBRARY=${OPENEXR_Iex_STATIC_LIBRARY}")
IF (WIN32)
  FIND_LIBRARY(OPENEXR_Iex_STATIC_DEBUG_LIBRARY
    NAMES Iexd Iex_d 
    PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})  
  #MESSAGE("DBG OPENEXR_Iex_STATIC_DEBUG_LIBRARY=${OPENEXR_Iex_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)


# from 1.30 on there is an additinal lib (which does not exist in 1.22)
FIND_LIBRARY(OPENEXR_IlmThread_STATIC_LIBRARY
  NAMES IlmThread
  PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})  
#MESSAGE("DBG OPENEXR_IlmThread_STATIC_LIBRARY=${OPENEXR_IlmThread_STATIC_LIBRARY}")
IF (WIN32)
  FIND_LIBRARY(OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY
    NAMES IlmThreadd IlmThread_d 
    PATHS ${OPENEXR_POSSIBLE_LIB_DIRS})  
  #MESSAGE("DBG OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY=${OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)


FIND_LIBRARY(OPENEXR_z_STATIC_LIBRARY
  NAMES z zlib zlib_a
  PATHS
  /lib
  /usr/lib
  /usr/local/lib
  "${OPENEXR_DIR}/lib"
  "${OPENEXR_HOME}/lib"
  "$ENV{OPENEXR_DIRE}/lib"
  "$ENV{OPENEXR_HOME}/lib"
  "${OPENEXR_DIR}/lib/zlib"
  "${OPENEXR_HOME}/lib/zlib"
  "$ENV{OPENEXR_DIR}/lib/zlib"
  "$ENV{OPENEXR_HOME}/lib/zlib"
  "$ENV{EXTRA}/lib"
  "C:/lib/lib"
  "D:/lib/lib"
  )
#MESSAGE("DBG OPENEXR_z_LIBRARY=${OPENEXR_z_STATIC_LIBRARY}")
IF (WIN32)
  FIND_LIBRARY(OPENEXR_z_STATIC_DEBUG_LIBRARY
    NAMES zd zlibd z_d zlib_d
    PATHS
    /lib
    /usr/lib
    /usr/local/lib
    "${OPENEXR_DIR}/lib"
    "${OPENEXR_HOME}/lib"
    "$ENV{OPENEXR_DIRE}/lib"
    "$ENV{OPENEXR_HOME}/lib"
    "${OPENEXR_DIR}/lib/zlib"
    "${OPENEXR_HOME}/lib/zlib"
    "$ENV{OPENEXR_DIR}/lib/zlib"
    "$ENV{OPENEXR_HOME}/lib/zlib"
    "$ENV{EXTRA}/lib"
    "C:/lib/lib"
    "D:/lib/lib"
    )
  #MESSAGE("DBG OPENEXR_z_LIBRARY=${OPENEXR_z_STATIC_DEBUG_LIBRARY}")
ENDIF(WIN32)


# OK so far (until something is missing)
SET(OPENEXR_FOUND TRUE)

##
# evaluate results: 
##
IF   (NOT OPENEXR_HALF_INCLUDE_DIR)
  SET(OPENEXR_FOUND FALSE)
ENDIF(NOT OPENEXR_HALF_INCLUDE_DIR)

IF   (NOT OPENEXR_IMFRGBA_INCLUDE_DIR)
  SET(OPENEXR_FOUND FALSE)
ENDIF(NOT OPENEXR_IMFRGBA_INCLUDE_DIR)

IF   (NOT OPENEXR_IEX_INCLUDE_DIR )
  SET(OPENEXR_FOUND FALSE)
ENDIF(NOT OPENEXR_IEX_INCLUDE_DIR )

IF   (NOT OPENEXR_IMATHBOX_INCLUDE_DIR) 
  SET(OPENEXR_FOUND FALSE)
ENDIF(NOT OPENEXR_IMATHBOX_INCLUDE_DIR)


IF   (NOT OPENEXR_IlmImf_STATIC_LIBRARY)
  IF   (NOT OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY)
    SET(OPENEXR_FOUND FALSE)
    MESSAGE(SEND_ERROR "IlmImf not found")
  ENDIF(NOT OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY)
ENDIF(NOT OPENEXR_IlmImf_STATIC_LIBRARY)

IF   (NOT OPENEXR_Imath_STATIC_LIBRARY)
  IF   (NOT OPENEXR_Imath_STATIC_DEBUG_LIBRARY)
    SET(OPENEXR_FOUND FALSE)
    MESSAGE(SEND_ERROR " Imath not found")
  ENDIF(NOT OPENEXR_Imath_STATIC_DEBUG_LIBRARY)
ENDIF(NOT OPENEXR_Imath_STATIC_LIBRARY)

IF   (NOT OPENEXR_Iex_STATIC_LIBRARY)
  IF   (NOT OPENEXR_Iex_STATIC_DEBUG_LIBRARY)
    SET(OPENEXR_FOUND FALSE)
    MESSAGE(SEND_ERROR " Iex not found")
  ENDIF(NOT OPENEXR_Iex_STATIC_DEBUG_LIBRARY)
ENDIF(NOT OPENEXR_Iex_STATIC_LIBRARY)

IF   (NOT OPENEXR_z_STATIC_LIBRARY)
  IF   (NOT OPENEXR_z_STATIC_DEBUG_LIBRARY)
    SET(OPENEXR_FOUND FALSE)
    MESSAGE(SEND_ERROR " zlib not found")
  ENDIF(NOT OPENEXR_z_STATIC_DEBUG_LIBRARY)    
ENDIF(NOT OPENEXR_z_STATIC_LIBRARY)


SET(OPENEXR_INCLUDE_DIR 
  "${OPENEXR_HALF_INCLUDE_DIR}"
  "${OPENEXR_IMFRGBA_INCLUDE_DIR}"
  "${OPENEXR_IEX_INCLUDE_DIR}"
  "${OPENEXR_IMATHBOX_INCLUDE_DIR}"
  )
#MESSAGE("DBG in Find OPENEXR_INCLUDE_DIR=${OPENEXR_INCLUDE_DIR}")

IF  (WIN32)

  SET(OPENEXR_LIBRARIES 
    debug     ${OPENEXR_Half_STATIC_DEBUG_LIBRARY}
    optimized ${OPENEXR_Half_STATIC_LIBRARY} )

  SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
    debug     ${OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY}
    optimized ${OPENEXR_IlmImf_STATIC_LIBRARY} )

  SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
    debug     ${OPENEXR_Imath_STATIC_DEBUG_LIBRARY}
    optimized ${OPENEXR_Imath_STATIC_LIBRARY} )

  SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
    debug     ${OPENEXR_Iex_STATIC_DEBUG_LIBRARY} 
    optimized ${OPENEXR_Iex_STATIC_LIBRARY} )

  SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
    debug     ${OPENEXR_z_STATIC_DEBUG_LIBRARY} 
    optimized ${OPENEXR_z_STATIC_LIBRARY} )

  # new lib in 1.30: 
  IF   (OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY)
    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
      debug     ${OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY} )  
  ENDIF(OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY)
  IF   (OPENEXR_IlmThread_STATIC_LIBRARY)
    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES}    
      optimized ${OPENEXR_IlmThread_STATIC_LIBRARY} )
  ENDIF(OPENEXR_IlmThread_STATIC_LIBRARY)


ELSE(WIN32)
  IF   (UNIX) 

    SET(OPENEXR_LIBRARIES 
      ${OPENEXR_Half_STATIC_LIBRARY} )

    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
      ${OPENEXR_IlmImf_STATIC_LIBRARY} )

    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
      ${OPENEXR_Imath_STATIC_LIBRARY} )

    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
      ${OPENEXR_Iex_STATIC_LIBRARY} )

    SET(OPENEXR_LIBRARIES ${OPENEXR_LIBRARIES} 
      ${OPENEXR_z_STATIC_LIBRARY} )

  ENDIF(UNIX)
ENDIF(WIN32)
# MESSAGE("DBG OPENEXR_LIBRARIES=${OPENEXR_LIBRARIES}") 


# HACK: use just one of the potentially multiple paths: 
GET_FILENAME_COMPONENT(OPENEXR_LINK_DIRECTORIES ${OPENEXR_IlmImf_STATIC_LIBRARY} PATH)


MARK_AS_ADVANCED(
  OPENEXR_HALF_INCLUDE_DIR

  OPENEXR_Half_STATIC_LIBRARY
  OPENEXR_Half_STATIC_DEBUG_LIBRARY

  OPENEXR_IlmImf_STATIC_LIBRARY
  OPENEXR_IlmImf_STATIC_DEBUG_LIBRARY

  OPENEXR_Imath_STATIC_LIBRARY
  OPENEXR_Imath_STATIC_DEBUG_LIBRARY

  OPENEXR_Iex_STATIC_LIBRARY
  OPENEXR_Iex_STATIC_DEBUG_LIBRARY

  OPENEXR_IEX_INCLUDE_DIR 
  OPENEXR_IMATHBOX_INCLUDE_DIR
  OPENEXR_IMFRGBA_INCLUDE_DIR

  OPENEXR_IlmThread_STATIC_LIBRARY
  OPENEXR_IlmThread_STATIC_DEBUG_LIBRARY

  OPENEXR_z_STATIC_LIBRARY
  OPENEXR_z_STATIC_DEBUG_LIBRARY
  )

