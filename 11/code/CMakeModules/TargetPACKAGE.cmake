# 
# PACKAGE target with cpack
#
# For an existing INSTALL target
# is an installer generated.
# Useful default configuration values are set set from PROJECT if unspecified.
#
# USAGE
#
# PROJECT(foo)
# ...
# INSTALL(...)
# ...
# SET(${PROJECT_NAME}_VERSION_MAJOR "2")
# SET(${PROJECT_NAME}_VERSION_MINOR "4")
# SET(${PROJECT_NAME}_VERSION_PATCH "b")
# SET(CPACK_PACKAGE_EXECUTABLES 
#   "hello"  "hello" # menu entries: (exe label)
#   "bar"    "bar" )
# INCLUDE(${CMAKE_MODULE_PATH}/TargetPACKAGE.cmake)
# 
#
# NOTES
# Based on CMake distribution package example
# Tested with cmake/cpack 2.4.2 on Windows with Installer NSIS 2.17
# 
# AUTHOR
# Jan Woetzel 2006 < www.mip.informatik.uni-kiel.de/~jw >
# 

#
# create PACKAGE from INSTALL targets
#

# If the cmake version includes cpack, use it
IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  IF(EXISTS "${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake")
    SET(CMAKE_INSTALL_MFC_LIBRARIES 0)
    INCLUDE(InstallRequiredSystemLibraries)
  ENDIF(EXISTS "${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake")
  IF   (NOT CPACK_PACKAGE_DESCRIPTION_SUMMARY)
    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - MIP, Kiel University/Germany")
  ENDIF(NOT CPACK_PACKAGE_DESCRIPTION_SUMMARY)
  IF   (NOT CPACK_PACKAGE_VENDOR)
    SET(CPACK_PACKAGE_VENDOR "MIP")
  ENDIF(NOT CPACK_PACKAGE_VENDOR)
  IF   (EXISTS  "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt")
    SET(CPACK_PACKAGE_DESCRIPTION_FILE  "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt")
  ENDIF(EXISTS  "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt")
  IF   (EXISTS  "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
    SET(CPACK_RESOURCE_FILE_LICENSE     "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
  ENDIF(EXISTS  "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
  
  IF   (${PROJECT_NAME}_VERSION_MAJOR)
    SET(CPACK_PACKAGE_VERSION_MAJOR  "${${PROJECT_NAME}_VERSION_MAJOR}")
  ELSE (${PROJECT_NAME}_VERSION_MAJOR)
    SET(CPACK_PACKAGE_VERSION_MAJOR  "0")
  ENDIF(${PROJECT_NAME}_VERSION_MAJOR)
  
  IF   (${PROJECT_NAME}_VERSION_MINOR)
    SET(CPACK_PACKAGE_VERSION_MINOR  "${${PROJECT_NAME}_VERSION_MINOR}")
  ELSE (${PROJECT_NAME}_VERSION_MINOR)
    SET(CPACK_PACKAGE_VERSION_MINOR  "0")
  ENDIF(${PROJECT_NAME}_VERSION_MINOR)
  
  IF   (${PROJECT_NAME}_VERSION_PATCH)
    SET(CPACK_PACKAGE_VERSION_PATCH  "${${PROJECT_NAME}_VERSION_PATCH}")
  ELSE (${PROJECT_NAME}_VERSION_PATCH)
    SET(CPACK_PACKAGE_VERSION_PATCH  "0")
  ENDIF(${PROJECT_NAME}_VERSION_PATCH)
  
  
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
  IF   (${PROJECT_NAME}_VERSION_MAJOR)
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${CPACK_PACKAGE_INSTALL_DIRECTORY} ${${PROJECT_NAME}_VERSION_MAJOR}")
    IF   (${PROJECT_NAME}_VERSION_MINOR)
      SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${CPACK_PACKAGE_INSTALL_DIRECTORY}.${${PROJECT_NAME}_VERSION_MINOR}")
    ENDIF(${PROJECT_NAME}_VERSION_MINOR)
  ENDIF(${PROJECT_NAME}_VERSION_MAJOR)
  
  IF   (NOT CPACK_SOURCE_PACKAGE_FILE_NAME)    
    SET(CPACK_SOURCE_PACKAGE_FILE_NAME  "${PROJECT_NAME}")
    
    IF   (${PROJECT_NAME}_VERSION_MAJOR)
      SET(CPACK_SOURCE_PACKAGE_FILE_NAME  "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${${PROJECT_NAME}_VERSION_MAJOR}")
      IF   (${PROJECT_NAME}_VERSION_MINOR)
        SET(CPACK_SOURCE_PACKAGE_FILE_NAME  "${CPACK_SOURCE_PACKAGE_FILE_NAME}.${${PROJECT_NAME}_VERSION_MINOR}")
        IF   (${PROJECT_NAME}_VERSION_PATCH)
          SET(CPACK_SOURCE_PACKAGE_FILE_NAME  "${CPACK_SOURCE_PACKAGE_FILE_NAME}.${${PROJECT_NAME}_VERSION_PATCH}")      
        ENDIF(${PROJECT_NAME}_VERSION_PATCH)
      ENDIF(${PROJECT_NAME}_VERSION_MINOR)
    ENDIF(${PROJECT_NAME}_VERSION_MAJOR)      
  ENDIF(NOT CPACK_SOURCE_PACKAGE_FILE_NAME)
  
  IF   (NOT DEFINED CPACK_SYSTEM_NAME)
    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)
  IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
    IF   (CMAKE_CL_64)
      SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
    ELSE (CMAKE_CL_64)
      SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
    ENDIF(CMAKE_CL_64)
  ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)
  IF   (NOT DEFINED CPACK_PACKAGE_FILE_NAME)
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
  ENDIF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
  IF   (WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    #IF   (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/logo.bmp")
    #  SET(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}\\\\logo.bmp")
    #ENDIF(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/logo.bmp")
    #SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\CMakeSetup.exe")
    IF   (NOT CPACK_NSIS_DISPLAY_NAME)
      SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} - Basic Image Algorithms C++ library")
    ENDIF(NOT CPACK_NSIS_DISPLAY_NAME)
    SET(CPACK_NSIS_HELP_LINK      "http:\\\\\\\\www.mip.informatik.uni-kiel.de")
    SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.mip.informatik.uni-kiel.de")
    IF   (NOT CPACK_NSIS_CONTACT)
      SET(CPACK_NSIS_CONTACT        "jw -at- mip.informatik.uni-kiel.de")
    ENDIF(NOT CPACK_NSIS_CONTACT)
    SET(CPACK_NSIS_MODIFY_PATH ON)
  ELSE (WIN32 AND NOT UNIX)
    #SET(CPACK_STRIP_FILES "bin/hello;bin/cmake;bin/cpack;bin/ctest")
    #SET(CPACK_STRIP_FILES "bin/hello")
    SET(CPACK_STRIP_FILES "")
    SET(CPACK_SOURCE_STRIP_FILES "")
  ENDIF(WIN32 AND NOT UNIX)

  # TODO: 
  #SET(CPACK_IGNORE_FILES "/CVS/;/\\.svn/;\\.swp$;\\.#;/#")
  #SET(CPACK_SOURCE_IGNORE_FILES "/CVS/;/\\.svn/;\\.swp$;\\.#;/#")
  
  #
  # create menu entries for these pairs of executable, label
  #
  
  ## e.g. set these inside parent project 
  #SET(CPACK_PACKAGE_EXECUTABLES 
  #  "hello"  "hello" 
  #  "helloC" "helloC" 
  #  )
  
  # generate cpack PACKAGE target with the above settings
  INCLUDE(CPack)
  
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")

